=================================================
PRD : Product Requirement Document : 제품요구서 작성 : ???
--------------------------------------------------
-- 용어에 익숙해지자 
: 구현요구사항을 AI 에 전달 하는 skill 을 익힘.
: 요구사항을 정확히 지시 : Prompt Detail
: 직접 지시가 아니라 AI 와 협업 
   예> 이렇게 하려면 어떻게 해야해 ? 
         : 난 알고 있지만. AI 가 생각하고 해결 할 수 있도록

: Low-code / Prompt Engineering / Ai-assisted coding
=================================================



### Prompt > userService.js 구현

#  선행 조건  
##. 구현된 폴더 및 컴포넌트는 유지함.
## 사용 Lib.
"axios": "^1.11.0",
"bootstrap": "^5.3.8",
"jquery": "^3.7.1",
"react-bootstrap": "^2.10.10",
"react-router-dom": "^5.3.4",

# 아래의 규칙 으로 구성해 수세요.
1. Folder Name
2. React Component File Name

================================================
Question>  src /services/userService.js  구현 문의
================================================
1. src /services
2. userService.js


[구현내용]
: Front End  :  React 
: Back End  :  API Server (JSON Data)
: API Server 에 요청하는 userService.js 구현

=================
Back End 참조내용
=================
1. Back End API Server 는 Spring 구현.

2. DTO 는 User.java 및 Search.java

//==>회원정보를 모델링(추상화/캡슐화)한 Bean
public class User {
	
	///Field
	private String userId;
	private String userName;
	private String password;
	private String role;
	private String ssn;
	private String phone;
	private String addr;
	private String email;
	private Date regDate;
	/////////////// EL 적용 위해 추가된 Field ///////////
	private String phone1;
	private String phone2;
	private String phone3;
	//////////////////////////////////////////////////////////////////////////////////////////////
	// JSON ==> Domain Object  Binding을 위해 추가된 부분
	private String regDateString;


//==>리스트화면을 모델링(추상화/캡슐화)한 Bean 
public class Search {
	
	///Field
	private int currentPage;
	private String searchCondition;
	private String searchKeyword;
	private int pageSize;
	//==> 리스트화면 currentPage에 해당하는 회원정보를 ROWNUM 사용 SELECT 위해 추가된 Field 
	//==> UserMapper.xml 의 
	//==> <select  id="getUserList"  parameterType="search"	resultMap="userSelectMap">
	//==> 참조
	private int endRowNum;
	private int startRowNum;


3. 	Conroller 는 LoginRestReactController.java

@RestController
@RequestMapping("/user/*")
public class UserRestController {

    // UserService 주입 (userServiceImpl 빈을 주입)
    @Autowired
    @Qualifier("userServiceImpl")
    private UserService userService;

    public UserRestController() {
        System.out.println("==> UserRestController 실행됨 : " + this.getClass());
    }

    /**
     * 회원가입 요청 처리
     * @param user 회원 정보 (JSON 형식으로 전달됨)
     * @return 성공 여부 (true)
     */
    @PostMapping("json/addUser")
    public boolean addUser(@RequestBody User user) throws Exception {
    	
        System.out.println("/user/json/addUser : POST 호출됨");
        
        userService.addUser(user);
        return true;
    }

    /**
     * 로그인 요청 처리
     * @param user 아이디 및 패스워드 정보 포함
     * @param session 로그인 성공 시 세션에 저장
     * @return DB에 저장된 사용자 정보 반환
     */
    @PostMapping("json/login")
    public User login(@RequestBody User user, HttpSession session) throws Exception {
    	
        System.out.println("/user/json/login : POST 호출됨");

        // 사용자 조회
        User dbUser = userService.getUser(user.getUserId());

        // 패스워드 일치 시 세션 저장
        if (dbUser != null && user.getPassword().equals(dbUser.getPassword())) {
            session.setAttribute("user", dbUser);
            return dbUser;
        }

        return null;
    }

    /**
     * 회원 상세 조회
     * @param userId 조회할 회원의 ID
     * @return 사용자 정보 반환
     */
    @GetMapping("json/getUser/{userId}")
    public User getUser(@PathVariable String userId) throws Exception {
    	
        System.out.println("/user/json/getUser : GET 호출됨");
        
        return userService.getUser(userId);
    }

    /**
     * 회원 리스트 조회 (검색 + 페이징 지원)
     * @param search 검색 조건 객체 (currentPage, searchKeyword 등 포함)
     * @return 회원 목록 및 전체 수 등의 정보 포함 Map 반환
     */
    @PostMapping("json/getUserList")
    public Map<String, Object> getUserList(@RequestBody Search search) throws Exception {
        
    	System.out.println("/user/json/getUserList : POST 호출됨");
        
    	return userService.getUserList(search);
    }

    /**
     * 회원 정보 수정
     * @param user 수정할 사용자 정보
     * @return 성공 여부 (true)
     */
    @PostMapping("json/updateUser")
    public boolean updateUser(@RequestBody User user) throws Exception {
        
    	System.out.println("/user/json/updateUser : POST 호출됨");
        
    	userService.updateUser(user);
        return true;
    }

    /**
     * 아이디 중복 확인
     * @param userId 중복 체크할 아이디
     * @return 중복 여부 (true: 중복 있음, false: 중복 없음)
     */
    @GetMapping("json/checkDuplication/{userId}")
    public boolean checkDuplication(@PathVariable String userId) throws Exception {
        
    	System.out.println("/user/json/checkDuplication : GET 호출됨");
        
    	return userService.checkDuplication(userId);
    }
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// React : 추가된 Method : checkLogin() / logout()
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    @GetMapping("json/checkLogin")
	public User checkLogin(HttpSession session) throws Exception{
		
		System.out.println();
		System.out.println("/user/json/checkLogin : GET 호출됨");
		
		User user = (User)session.getAttribute("user");
		
		System.out.println("[To Client Data]");
		System.out.println(user);
		
		return user;
	}	
    
	@PostMapping("json/logout")
	public void logout(HttpSession session) throws Exception{
			
		System.out.println("/user/json/logout : POST 호출됨");
		
		User user = (User)session.getAttribute("user");
		
		System.out.println(user);
		
		//==> HttpSession 종료
		session.invalidate();
	}
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}


4. PostMan 으로 단위 Test 완료

# 1. 회원가입 (Add User)
# ------------------------------------------------------------
- Method: POST
- URL: http://localhost:8080/user/json/addUser
- Headers:
    - Content-Type: application/json
- Body (raw, JSON):
{
    "userId": "testuser01",
    "userName": "테스트유저",
    "password": "password12",
    "ssn": "9001011234567",
    "addr": "서울시 강남구",
    "phone": "010-1234-5678",
    "email": "testuser01@example.com"
}



# 2. 로그인 (Login)
# ------------------------------------------------------------
- Method: POST
- URL: http://localhost:8080/user/json/login
- Headers:
    - Content-Type: application/json
- Body (raw, JSON):
{
    "userId": "testuser01",
    "password": "password12"
}
- 참고: 로그인 성공 시 Postman의 응답(Response) 섹션에서 Cookies 탭을 확인 
          JSESSIONID가 생성된 것을 볼 수 있습니다.



# 3. 회원 정보 조회 (Get User)
# ------------------------------------------------------------
- Method: GET
- URL: http://localhost:8080/user/json/getUser/testuser01
- 설명: URL의 마지막 부분(testuser01)에 조회하고 싶은 사용자의 아이디를 입력합니다.



# 4. 회원 목록 조회 (Get User List)
# ------------------------------------------------------------
- Method: POST
- URL: http://localhost:8080/user/json/getUserList
- Headers:
    - Content-Type: application/json
- Body (raw, JSON):
{
    "currentPage": 1,
    "pageSize": 5
}



# 5. 회원 정보 수정 (Update User)
# ------------------------------------------------------------
- Method: POST
- URL: http://localhost:8080/user/json/updateUser
- Headers:
    - Content-Type: application/json
- Body (raw, JSON):
{
    "userId": "testuser01",
    "userName": "테스트유저수정",
    "addr": "서울시 서초구",
    "phone": "010-8765-4321",
    "email": "updateduser@example.com"
}



# 6. 아이디 중복 확인 (Check Duplication)
# ------------------------------------------------------------
- Method: GET
- URL: http://localhost:8080/user/json/checkDuplication/testuser01
- 설명: URL의 마지막 부분(testuser01)에 확인하고 싶은 아이디를 입력합니다. 
         가입된 아이디일 경우 false, 아닐 경우 true가 반환됩니다.



# 7. 로그인 상태 확인 (Check Login)
# ------------------------------------------------------------
- Method: GET
- URL: http://localhost:8080/user/json/checkLogin
- 설명: 로그인이 되어있는 상태에서 이 API를 호출하면 현재 세션에 저장된 사용자 정보가 반환됩니다. 
         로그아웃 상태라면 null이 반환됩니다.




# 8. 로그아웃 (Logout)
# ------------------------------------------------------------
- Method: POST
- URL: http://localhost:8080/user/json/logout
- 설명: 이 API를 호출하면 서버의 현재 세션이 무효화됩니다. Body는 비워두고 요청합니다.


# 8.1. 로그아웃 확인 상태 확인 (Check Login)
# ------------------------------------------------------------
- Method: GET
- URL: http://localhost:8080/user/json/checkLogin
- 설명: 로그인이 되어있는 상태에서 이 API를 호출하면 현재 세션에 저장된 사용자 정보가 반환됩니다. 
         로그아웃 상태라면 null이 반환됩니다.


: API Server 에 요청하는 userService.js 구현







=======================================================
Answer
=======================================================
/*
src/services/userService.js
: React Front-End → Spring Back-End(JSON) 통신 모듈
: - axios ^1.11.0
: - 세션 쿠키 사용 시 same-origin이면 자동, 크로스 도메인일 경우 withCredentials 필요
*/

import axios from 'axios';

/** ===============================================================
 * Axios 인스턴스
 *  - 백엔드 컨트롤러 base : @RequestMapping("/user/*")
 *  - 모든 엔드포인트는 '/user/json/...'
 *  - 필요 시 baseURL을 환경변수로 분리해 주세요.
 * =============================================================== */
export const api = axios.create({
  baseURL: 'http://localhost:8080/user/json',
  // 크로스 도메인에서 세션 쿠키(JSESSIONID) 사용 시 true
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

/** 1) 회원가입 */
export const addUser = async (user) => {
  const res = await api.post('/addUser', user);
  return res.data; // boolean
};

/** 2) 로그인 */
export const login = async ({ userId, password }) => {
  const res = await api.post('/login', { userId, password });
  return res.data; // User|null
};

/** 3) 회원 상세 조회 */
export const getUser = async (userId) => {
  const res = await api.get(`/getUser/${encodeURIComponent(userId)}`);
  return res.data; // User
};

/** 4) 회원 목록 조회 (검색/페이징) */
export const getUserList = async (search) => {
  // search: { currentPage, pageSize, searchCondition?, searchKeyword? }
  const res = await api.post('/getUserList', search);
  return res.data; // Map<String,Object> 형태(JSON) { list, totalCount, ... }
};

/** 5) 회원 정보 수정 */
export const updateUser = async (user) => {
  const res = await api.post('/updateUser', user);
  return res.data; // boolean
};

/** 6) 아이디 중복 확인 */
export const checkDuplication = async (userId) => {
  const res = await api.get(`/checkDuplication/${encodeURIComponent(userId)}`);
  return res.data; // boolean (컨트롤러 주석에 맞춰: true=중복, false=미중복)
};

/** 7) 로그인 상태 확인 */
export const checkLogin = async () => {
  const res = await api.get('/checkLogin');
  return res.data; // User|null
};

/** 8) 로그아웃 */
export const logout = async () => {
  const res = await api.post('/logout');
  return res.data; // void
};

/** 번들 export (named + default 둘 다 지원) */
const userService = {
  addUser,
  login,
  getUser,
  getUserList,
  updateUser,
  checkDuplication,
  checkLogin,
  logout,
};

export default userService;



=======================================================
간단 사용 예 (참고)
=======================================================
// 방법 A: 객체로 사용
import userService from '../services/userService';

const me = await userService.login({ userId: 'testuser01', password: 'password12' });

// 방법 B: 함수만 골라서 사용
import { addUser, getUserList } from '../services/userService';

await addUser({ userId: 'u01', userName: '홍길동', password: 'p@ss' });
const page = await getUserList({ currentPage: 1, pageSize: 5 });


=======================================================